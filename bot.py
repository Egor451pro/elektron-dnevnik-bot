import asyncio
import sqlite3
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import Message, CallbackQuery
from urllib.parse import quote
from aiogram.filters.state import StateFilter
import aiosqlite
from urllib.parse import quote, unquote
TOKEN = "7885652871:AAH6JxFq5Ecty7Bx7FDl2vasCbFXjOCT3Mo"

bot = Bot(token=TOKEN)
dp = Dispatcher(storage=MemoryStorage())

conn = sqlite3.connect("dnevnik.db")
cursor = conn.cursor()

cursor.execute("""
CREATE TABLE IF NOT EXISTS subjects (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    name TEXT,
    UNIQUE(user_id, name)
)
""")

cursor.execute("""
CREATE TABLE IF NOT EXISTS grades (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    user_id INTEGER,
    subject TEXT,
    grade INTEGER
)
""")

conn.commit()

DEFAULT_SUBJECTS = [
    "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫", "–ë–µ–ª–æ—Ä—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–†—É—Å—Å–∫–∏–π —è–∑—ã–∫",
    "–†—É—Å—Å–∫–∞—è –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–ò–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞",
    "–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–í—Å–µ–º–∏—Ä–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –ë–µ–ª–∞—Ä—É—Å–∏",
    "–û–±—â–µ—Å—Ç–≤–æ–≤–µ–¥–µ–Ω–∏–µ", "–ì–µ–æ–≥—Ä–∞—Ñ–∏—è", "–ë–∏–æ–ª–æ–≥–∏—è", "–§–∏–∑–∏–∫–∞",
    "–•–∏–º–∏—è", "–¢—Ä—É–¥–æ–≤–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞"
]

class GradeStates(StatesGroup):
    choosing_subject = State()
    choosing_grade = State()
    deleting_grade = State()
    viewing_grades = State()
    calculating_average = State()
    clearing_grades = State()
    confirming_clear = State()  # <-- –¥–æ–±–∞–≤—å —Å—é–¥–∞
    adding_subject = State()
    managing_subjects = State()



def main_menu():
    kb = [
        [InlineKeyboardButton(text=" –î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="add_grade")],
        [InlineKeyboardButton(text=" –£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É", callback_data="delete_grade")],
        [InlineKeyboardButton(text=" –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏", callback_data="view_grades")],
        [InlineKeyboardButton(text=" –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É", callback_data="average")],
        [InlineKeyboardButton(text=" –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º", callback_data="overall_average")],
        [InlineKeyboardButton(text=" –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏", callback_data="clear_grades")],
        [InlineKeyboardButton(text=" –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏", callback_data="manage_subjects")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=kb)


@dp.message(F.text.lower() == "/start")
async def cmd_start(message: types.Message):
    user_id = message.from_user.id

    async with aiosqlite.connect("dnevnik.db") as db:
        # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞ –ø—ã—Ç–∞–µ–º—Å—è –≤—Å—Ç–∞–≤–∏—Ç—å, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –¥—É–±–ª–∏–∫–∞—Ç—ã
        for subject in DEFAULT_SUBJECTS:
            try:
                await db.execute(
                    "INSERT INTO subjects (user_id, name) VALUES (?, ?)",
                    (user_id, subject)
                )
            except aiosqlite.IntegrityError:
                continue
        await db.commit()

    instructions = (
        " <b>–ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≠–ª–µ–∫—Ç—Ä–æ–Ω–Ω—ã–π –î–Ω–µ–≤–Ω–∏–∫!</b>\n\n"
        "–í–æ—Ç —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å —Å –ø–æ–º–æ—â—å—é —ç—Ç–æ–≥–æ –±–æ—Ç–∞:\n\n"
        " <b>–î–æ–±–∞–≤–∏—Ç—å –æ—Ü–µ–Ω–∫—É</b> ‚Äî –≤—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –∏ —É–∫–∞–∂–∏ —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É.\n"
        " <b>–£–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É</b> ‚Äî —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –∏–∑ –ø—Ä–µ–¥–º–µ—Ç–∞.\n"
        " <b>–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏</b> ‚Äî –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞–∂–¥–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É.\n"
        " <b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É</b> ‚Äî –≤—ã–±–∏—Ä–∞–µ—à—å –ø—Ä–µ–¥–º–µ—Ç, –∞ –±–æ—Ç —Å—á–∏—Ç–∞–µ—Ç —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É.\n"
        " <b>–°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º</b> ‚Äî —Å—á–∏—Ç–∞–µ—Ç –æ–±—â—É—é —Å—Ä–µ–¥–Ω—é—é –æ—Ü–µ–Ω–∫—É.\n"
        " <b>–û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏</b> ‚Äî —É–¥–∞–ª—è–µ—Ç –∞–±—Å–æ–ª—é—Ç–Ω–æ –≤—Å–µ –æ—Ü–µ–Ω–∫–∏. –ë—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω!\n"
        " <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏</b> ‚Äî –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ, —É–¥–∞–ª–µ–Ω–∏–µ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.\n\n"
        "–í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ "
    )

    await message.answer(instructions, parse_mode=ParseMode.HTML, reply_markup=main_menu())
@dp.callback_query(F.data == "add_grade")
async def add_grade_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE user_id = ?", (user_id,)) as cursor:
            subjects = await cursor.fetchall()

    kb = [[InlineKeyboardButton(text=subj[0][:25], callback_data=f"subject_{subj[0]}")] for subj in subjects]
    kb.append([InlineKeyboardButton(text=" –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥

    await callback.message.edit_text(" –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", reply_markup=InlineKeyboardMarkup(inline_keyboard=kb))
    await state.set_state(GradeStates.choosing_subject)
@dp.callback_query(F.data.startswith("subject_"))
async def choose_subject(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    subject = callback.data.split("subject_")[1]
    await state.update_data(subject=subject)

    kb = [[InlineKeyboardButton(text=str(i), callback_data=f"grade_{i}")] for i in range(10, 0, -1)]
    kb.append([InlineKeyboardButton(text=" –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])  # –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    
    await callback.message.edit_text(
        f" –í—ã –≤—ã–±—Ä–∞–ª–∏: <b>{subject}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb),
        parse_mode=ParseMode.HTML
    )
    await state.set_state(GradeStates.choosing_grade)

@dp.callback_query(F.data.startswith("grade_"))
async def save_grade(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    data = await state.get_data()
    subject = data.get("subject")

    if not subject:
        await callback.message.answer(" –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω –ø—Ä–µ–¥–º–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await callback.message.answer(" –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await state.clear()
        return

    grade = int(callback.data.split("grade_")[1])

    async with aiosqlite.connect("dnevnik.db") as db:
        try:
            await db.execute(
                "INSERT INTO grades (user_id, subject, grade) VALUES (?, ?, ?)",
                (user_id, subject, grade)
            )
            await db.commit()
        except Exception as e:
            await callback.message.answer(f" –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ü–µ–Ω–∫–∏: {e}")
            return

    await callback.message.edit_text(
        f" –û—Ü–µ–Ω–∫–∞ <b>{grade}</b> –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        parse_mode=ParseMode.HTML
    )
    await callback.message.answer(" –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()
@dp.callback_query(F.data == "view_grades")
async def view_grades_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    result = []

    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE user_id = ?", (user_id,)) as cursor:
            subjects = await cursor.fetchall()

        for subj in subjects:
            subject = subj[0]
            async with db.execute("SELECT grade FROM grades WHERE subject = ? AND user_id = ?", (subject, user_id)) as cursor:
                grades = await cursor.fetchall()

            if grades:
                grades_list = ", ".join(str(grade[0]) for grade in grades)
                result.append(f"<b>{subject}</b>: {grades_list}")
            else:
                result.append(f"<b>{subject}</b>:")

    response = "\n".join(result) or "–£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º."
    await callback.message.edit_text(response, parse_mode=ParseMode.HTML)
    await callback.message.answer(" –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()

@dp.callback_query(F.data == "delete_grade")
async def delete_grade_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    kb = []

    async with aiosqlite.connect("dnevnik.db") as db:
        # –í—ã–±–∏—Ä–∞–µ–º id –∏ –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞
        async with db.execute("SELECT id, name FROM subjects WHERE user_id = ?", (user_id,)) as cursor:
            subjects = await cursor.fetchall()

    if not subjects:
        await callback.message.edit_text("‚ùóÔ∏è–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫.")
        await state.clear()
        return

    for subj_id, subj_name in subjects:
        kb.append([
            InlineKeyboardButton(
                text=subj_name[:25],  # –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
                callback_data=f"delete_subject_{subj_id}"  # –ø–µ—Ä–µ–¥–∞–µ–º id –ø—Ä–µ–¥–º–µ—Ç–∞
            )
        ])

    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    await callback.message.edit_text(
        "üóë –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –æ—Ü–µ–Ω–∫—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await state.set_state(GradeStates.deleting_grade)


@dp.callback_query(F.data.startswith("delete_subject_"))
async def delete_subject_grades(callback: CallbackQuery, state: FSMContext):
    subject_id = int(callback.data.replace("delete_subject_", ""))
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø—Ä–µ–¥–º–µ—Ç–∞ –ø–æ id
    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE id = ? AND user_id = ?", (subject_id, user_id)) as cursor:
            row = await cursor.fetchone()

    if not row:
        await callback.message.edit_text("‚ùå –ü—Ä–µ–¥–º–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return

    subject = row[0]
    await state.update_data(subject=subject)

    # –ü–æ–ª—É—á–∞–µ–º –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT id, grade FROM grades WHERE subject = ? AND user_id = ?", (subject, user_id)) as cursor:
            grades = await cursor.fetchall()

    if not grades:
        await callback.message.edit_text(
            f"‚ö†Ô∏è –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b> –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.",
            parse_mode=ParseMode.HTML
        )
        await callback.message.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await state.clear()
        return

    kb = [
        [InlineKeyboardButton(text=f"{grade[1]}", callback_data=f"delete_grade_id_{grade[0]}")]
        for grade in grades
    ]
    kb.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    await callback.message.edit_text(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏–∑ <b>{subject}</b>:",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await state.set_state(GradeStates.deleting_grade)


@dp.callback_query(F.data.startswith("delete_grade_id_"))
async def delete_grade(callback: CallbackQuery, state: FSMContext):
    grade_id = int(callback.data.replace("delete_grade_id_", ""))
    user_id = callback.from_user.id

    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT subject, grade FROM grades WHERE id = ? AND user_id = ?", (grade_id, user_id)) as cursor:
            row = await cursor.fetchone()

        if not row:
            await callback.message.edit_text(
                "‚ùå –û—Ü–µ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ —É–¥–∞–ª–µ–Ω–∞.",
                reply_markup=InlineKeyboardMarkup(
                    inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
                )
            )
            await state.clear()
            return

        subject, grade = row
        await db.execute("DELETE FROM grades WHERE id = ? AND user_id = ?", (grade_id, user_id))
        await db.commit()

    await callback.message.edit_text(
        f"‚úÖ –û—Ü–µ–Ω–∫–∞ <b>{grade}</b> –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b> —É–¥–∞–ª–µ–Ω–∞.",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        )
    )
    await state.clear()


@dp.callback_query(F.data.startswith("average_subject_"))
async def calculate_average(callback: CallbackQuery, state: FSMContext):
    encoded_subject = callback.data.split("average_subject_")[1]
    subject = unquote(encoded_subject)  # –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Å—é–¥–∞

    # –¥–∞–ª—å—à–µ —Ä–∞–±–æ—Ç–∞–µ—à—å —Å subject, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    user_id = callback.from_user.id
    await state.update_data(subject=subject)

    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT grade FROM grades WHERE subject = ? AND user_id = ?", (subject, user_id)) as cursor:
            grades = await cursor.fetchall()

    if not grades:
        await callback.message.edit_text(
            f"‚ùå –ü–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b> –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫.",
            parse_mode=ParseMode.HTML,
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
            )
        )
        await state.clear()
        return

    grades_list = [grade[0] for grade in grades]
    average = round(sum(grades_list) / len(grades_list), 3)

    await callback.message.edit_text(
        f"üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É <b>{subject}</b>: {average}",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]]
        )
    )
    await state.clear()


@dp.callback_query(F.data == "overall_average")
async def overall_average_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE user_id = ?", (user_id,)) as cursor:
            subjects = await cursor.fetchall()

        subject_averages = []

        for subj in subjects:
            subject = unquote(subj[0])  # –µ—Å–ª–∏ —Ç—ã –∫–æ–¥–∏—Ä—É–µ—à—å –ø—Ä–µ–¥–º–µ—Ç—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏, –∑–¥–µ—Å—å - –¥–µ–∫–æ–¥–∏—Ä—É–µ–º
            async with db.execute("SELECT grade FROM grades WHERE subject = ? AND user_id = ?", (subject, user_id)) as cur:
                grades = await cur.fetchall()

            if grades:
                grades_list = [grade[0] for grade in grades]
                subject_avg = sum(grades_list) / len(grades_list)
                subject_averages.append(subject_avg)

    if subject_averages:
        overall_avg = round(sum(subject_averages) / len(subject_averages), 3)
        text = f"üìä –°—Ä–µ–¥–Ω–∏–π –±–∞–ª–ª –ø–æ –≤—Å–µ–º –ø—Ä–µ–¥–º–µ—Ç–∞–º: {overall_avg}"
    else:
        text = "‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –æ—Ü–µ–Ω–æ–∫ –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞."

    await callback.message.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_menu")]
            ]
        )
    )
    await state.clear()

@dp.callback_query(F.data == "clear_grades")
async def clear_grades_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        " –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=" –î–∞, —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –æ—Ü–µ–Ω–∫–∏", callback_data="confirm_clear_grades")],
            [InlineKeyboardButton(text=" –û—Ç–º–µ–Ω–∞", callback_data="cancel_clear_grades")]
        ])
    )
    await state.set_state(GradeStates.confirming_clear)


@dp.callback_query(F.data == "confirm_clear_grades", StateFilter(GradeStates.confirming_clear))
async def confirm_clear_grades_handler(callback: CallbackQuery, state: FSMContext):
    async with aiosqlite.connect("dnevnik.db") as db:
        await db.execute("DELETE FROM grades WHERE user_id = ?", (callback.from_user.id,))      
        await db.commit()

    await callback.message.edit_text(" –í—Å–µ –æ—Ü–µ–Ω–∫–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.message.answer(" –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()

@dp.callback_query(F.data == "cancel_clear_grades", StateFilter(GradeStates.confirming_clear))
async def cancel_clear_grades_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(" –û—á–∏—Å—Ç–∫–∞ –æ—Ü–µ–Ω–æ–∫ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await callback.message.answer(" –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()

async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    await dp.start_polling(bot)

@dp.callback_query(F.data == "average")
async def average_grade_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE user_id = ?", (user_id,)) as cursor:
            subjects = await cursor.fetchall()

    if not subjects:
        await callback.message.edit_text(" –ù–µ—Ç –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞.")
        await callback.message.answer(" –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await state.clear()
        return

    kb = [[InlineKeyboardButton(text=subj[0][:25], callback_data=f"average_subject_{subj[0]}")] for subj in subjects]
    kb.append([InlineKeyboardButton(text=" –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")]) 

    await callback.message.edit_text(
        " –í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ –±–∞–ª–ª–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await state.set_state(GradeStates.calculating_average)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏"
@dp.callback_query(F.data == "manage_subjects")
async def manage_subjects_handler(callback: CallbackQuery, state: FSMContext):
    kb = [
        [InlineKeyboardButton(text="üìñ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã", callback_data="view_subjects")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç", callback_data="add_subject")],
        [InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç", callback_data="delete_subject")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
    ]
    await callback.message.edit_text(
        "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞–º–∏:\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await state.set_state(GradeStates.managing_subjects)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@dp.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤
@dp.callback_query(F.data == "view_subjects")
async def view_subjects_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE user_id = ?", (user_id,)) as cursor:
            subjects = await cursor.fetchall()

    if subjects:
        subject_list = "\n".join([f"‚Ä¢ {subj[0]}" for subj in subjects])
        await callback.message.edit_text(f"üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤:\n{subject_list}")
    else:
        await callback.message.edit_text("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤.")
    
    await callback.message.answer("üè† –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç"
@dp.callback_query(F.data == "add_subject")
async def add_subject_callback_handler(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞:")
    await state.set_state(GradeStates.adding_subject)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
@dp.message(StateFilter(GradeStates.adding_subject))
async def add_subject_name_handler(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    subject_name = message.text.strip()

    if not subject_name:
        await message.answer("‚ùóÔ∏è–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:")
        return

    async with aiosqlite.connect("dnevnik.db") as db:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ
        async with db.execute(
            "SELECT 1 FROM subjects WHERE user_id = ? AND name = ?", (user_id, subject_name)
        ) as cursor:
            exists = await cursor.fetchone()

        if exists:
            await message.answer("‚ùóÔ∏è–¢–∞–∫–æ–π –ø—Ä–µ–¥–º–µ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –í–≤–µ–¥–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ:")
            return

        # –ï—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º
        await db.execute(
            "INSERT INTO subjects (user_id, name) VALUES (?, ?)", (user_id, subject_name)
        )
        await db.commit()

    await message.answer(
        f"‚úÖ –ü—Ä–µ–¥–º–µ—Ç <b>{subject_name}</b> —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!", parse_mode=ParseMode.HTML
    )
    await message.answer("üîô –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()

@dp.callback_query(F.data == "delete_subject")
async def delete_subject_handler(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE user_id = ?", (user_id,)) as cursor:
            subjects = await cursor.fetchall()

    if not subjects:
        await callback.message.edit_text("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
        await state.clear()
        return

    kb = [[InlineKeyboardButton(text=subj[0], callback_data=f"delete_{subj[0]}")] for subj in subjects]
    kb.append([InlineKeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_menu")])

    await callback.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=kb)
    )
    await state.set_state(GradeStates.deleting_subject)

@dp.callback_query(F.data.startswith("delete_"))
async def delete_subject_from_db(callback: CallbackQuery, state: FSMContext):
    subject_name = callback.data.split("delete_")[1]
    user_id = callback.from_user.id

    async with aiosqlite.connect("dnevnik.db") as db:
        async with db.execute("SELECT name FROM subjects WHERE name = ? AND user_id = ?", (subject_name, user_id)) as cursor:
            subject = await cursor.fetchone()

        if not subject:
            await callback.message.edit_text(f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
            await state.clear()
            return

        await db.execute("DELETE FROM grades WHERE subject = ? AND user_id = ?", (subject_name, user_id))
        await db.execute("DELETE FROM subjects WHERE name = ? AND user_id = ?", (subject_name, user_id))
        await db.commit()

    await callback.message.edit_text(f"–ü—Ä–µ–¥–º–µ—Ç '{subject_name}' –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã.")
    await callback.message.answer("–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await state.clear()
if __name__ == "__main__":
    asyncio.run(main())
